generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subjects      Subject[]
  tasks         Task[]
  assignments   Assignment[]
  reminders     Reminder[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Subject {
  id        String   @id @default(uuid())
  title     String
  color     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  classes   Class[]
  createdAt DateTime @default(now())

  Assignment Assignment[]

  Task Task[]
}

model Class {
  id        String   @id @default(uuid())
  title     String
  location  String?
  startTime DateTime
  endTime   DateTime
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  createdAt DateTime @default(now())
}
model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    Priority @default(MEDIUM)
  status      Status   @default(PENDING)   // ✅ keep status in schema
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  subject     Subject? @relation(fields: [subjectId], references: [id])
  subjectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Reminder Reminder[]
}



model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  submitted   Boolean  @default(false)
  grade       Float?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  subject     Subject? @relation(fields: [subjectId], references: [id])
  subjectId   String?
  createdAt   DateTime @default(now())
}

model Reminder {
  id         String   @id @default(uuid())
  title      String
  remindAt   DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  task       Task?    @relation(fields: [taskId], references: [id])
  taskId     String?
  createdAt  DateTime @default(now())
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS   // ✅ added new option
  DONE
}
